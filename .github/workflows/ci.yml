name: CI

on:
  push:
    branches:
      - main
      - "feature/**"
      - "feat/**"
      - "bugfix/**"
      - "chore/**"
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Lint, Type, and Test (Python 3.11)
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install uv
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Resolve and sync dependencies
        shell: bash
        run: |
          if [ ! -f uv.lock ]; then
            uv lock
          fi
          uv sync

      - name: Lint (ruff)
        shell: bash
        run: |
          uv run ruff check .

      - name: Format check (black)
        shell: bash
        run: |
          uv run black --check .

      - name: Type check (mypy)
        shell: bash
        run: |
          uv run mypy src

      - name: Run tests (pytest + coverage)
        shell: bash
        run: |
          uv run pytest -q --maxfail=1

      - name: Generate coverage XML (fail under 80%)
        shell: bash
        if: always()
        run: |
          uv run pytest --cov=src --cov-report=xml:coverage.xml --cov-fail-under=80

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  docs-snippets:
    name: Validate docs commands
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Detect examples directory
        id: detect_examples
        shell: bash
        run: |
          if [ -d "examples" ] && find examples -type f | grep -q .; then
            echo "run_snippets=true" >> "$GITHUB_OUTPUT"
            echo "Examples detected; will run snippet smoke."
          else
            echo "run_snippets=false" >> "$GITHUB_OUTPUT"
            echo "No examples/ content detected; skipping snippet smoke."
          fi

      - uses: actions/setup-python@v5
        if: ${{ steps.detect_examples.outputs.run_snippets == 'true' }}
        with:
          python-version: "3.11"

      - name: Install uv and tools
        if: ${{ steps.detect_examples.outputs.run_snippets == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Sync deps
        if: ${{ steps.detect_examples.outputs.run_snippets == 'true' }}
        run: |
          if [ ! -f uv.lock ]; then
            uv lock
          fi
          uv sync

      - name: Run example entrypoints (smoke)
        run: |
          set -euo pipefail
          echo "Running hello_graph via module form..."
          if ! uv run python -m examples.hello_graph.main; then
            echo "::error::hello_graph failed when running as module (-m). Check examples/hello_graph/main.py for regressions."
            exit 1
          fi
          echo "Running pipeline_demo via module form (import smoke)..."
          if ! uv run python -m examples.pipeline_demo.main; then
            echo "::error::pipeline_demo failed when running as module (-m). Check examples/pipeline_demo/main.py for regressions."
            exit 1
          fi
          echo "All docs snippet smokes completed successfully."

  docs-build:
    name: Build MkDocs site
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install MkDocs and plugins
        run: |
          python -m pip install --upgrade pip
          pip install "mkdocs==1.5.3" "mkdocs-material==9.5.17" "mkdocs-git-revision-date-localized-plugin==1.2.4"
      - name: Build
        run: mkdocs build --strict

  link-check:
    name: Check links (lychee)
    # Note: kept non-blocking while stabilizing (monitor for 3â€“5 green runs, then make required)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare lychee cache
        id: lychee-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/lychee
          key: lychee-${{ runner.os }}-${{ hashFiles('.lycheeignore') }}
          restore-keys: |
            lychee-${{ runner.os }}-

      - name: Show lychee config note
        run: |
          echo "Using .lycheeignore for transient domains and known flaky targets"
          echo "Retries enabled via lychee flags to reduce flakiness"
          echo "Caching lychee at ~/.cache/lychee to speed up subsequent runs"

      - name: Run lychee (docs and repo root)
        id: lychee
        uses: lycheeverse/lychee-action@v1.10.0
        with:
          args: >
            --verbose
            --no-progress
            --accept 200,206,429
            --max-redirects 5
            --timeout 20
            --retry-wait-time 2
            --max-retries 2
            --exclude-all-private
            --exclude-file .lycheeignore
            --scheme https
            --format markdown
            --output lychee-report.md
            docs
            .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload lychee report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lychee-report
          path: lychee-report.md
          if-no-files-found: warn
          retention-days: 7

      - name: Print lychee summary
        if: always()
        run: |
          echo "## Link Check Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f lychee-report.md ]; then
            bad_count=$(grep -cE '^.*(Error|BROKEN).*' lychee-report.md || true)
            echo "- Broken link count (approx): ${bad_count}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### First 50 lines of report" >> $GITHUB_STEP_SUMMARY
            head -n 50 lychee-report.md >> $GITHUB_STEP_SUMMARY
          else
            echo "- Report file not found (lychee may have failed before writing output)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail if lychee reported issues
        if: ${{ failure() }}
        run: |
          echo "::error::Link-check failed. See lychee output above, the lychee-report artifact, and the summary for details."
          exit 1
