name: CI

on:
  push:
    branches:
      - main
      - "feature/**"
      - "feat/**"
      - "bugfix/**"
      - "chore/**"
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Lint, Type, and Test (Python 3.11)
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install uv
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Resolve and sync dependencies
        shell: bash
        run: |
          if [ ! -f uv.lock ]; then
            uv lock
          fi
          uv sync

      - name: Lint (ruff)
        shell: bash
        run: |
          uv run ruff check .

      - name: Format check (black)
        shell: bash
        run: |
          uv run black --check .

      - name: Type check (mypy)
        shell: bash
        run: |
          uv run mypy src

      - name: Run tests (pytest + coverage)
        shell: bash
        run: |
          uv run pytest -q --maxfail=1

      - name: Generate coverage XML (fail under 80%)
        shell: bash
        if: always()
        run: |
          uv run pytest --cov=src --cov-report=xml:coverage.xml --cov-fail-under=80

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  docs-snippets:
    name: Validate docs commands
    runs-on: ubuntu-latest
    # Only run if the repository contains an examples/ directory
    if: ${{ hashFiles('examples/**') != '' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install uv and tools
        run: |
          python -m pip install --upgrade pip
          pip install uv
      - name: Sync deps
        run: |
          if [ ! -f uv.lock ]; then
            uv lock
          fi
          uv sync
      - name: Run example entrypoints (smoke)
        run: |
          set -e
          echo "Running hello_graph (short smoke)..."
          uv run python - << 'PY'
          import sys
          from examples.hello_graph import main as m
          if hasattr(m, "main"):
              try:
                  m.main()
              except SystemExit:
                  pass
              except Exception as e:
                  print(f"hello_graph run non-fatal error: {e}", file=sys.stderr)
          PY
          echo "Running pipeline_demo (import smoke)..."
          uv run python - << 'PY'
          import importlib, sys
          try:
              importlib.import_module("examples.pipeline_demo.main")
          except Exception as e:
              print(f"pipeline_demo import error: {e}", file=sys.stderr)
              sys.exit(1)
          PY

  docs-build:
    name: Build MkDocs site
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install MkDocs and plugins
        run: |
          python -m pip install --upgrade pip
          pip install "mkdocs==1.5.3" "mkdocs-material==9.5.17" "mkdocs-git-revision-date-localized-plugin==1.2.4"
      - name: Build
        run: mkdocs build --strict

  link-check:
    name: Check links (lychee)
    # Note: kept non-blocking while stabilizing (monitor for 3â€“5 green runs, then make required)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show lychee config note
        run: |
          echo "Using .lycheeignore for transient domains and known flaky targets"
          echo "Retries enabled via lychee flags to reduce flakiness"

      - name: Run lychee
        uses: lycheeverse/lychee-action@v1.10.0
        with:
          args: >
            --verbose
            --no-progress
            --accept 200,206,429
            --max-redirects 5
            --timeout 20
            --retry-wait-time 2
            --max-retries 2
            --exclude-all-private
            --exclude-file .lycheeignore
            .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
