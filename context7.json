{
  "$schema": "https://context7.com/schema/context7.json",
  "projectTitle": "Meridian Runtime",
  "description": "A minimal, reusable graph runtime for Python with bounded edges, fairness, and observability for building real-time dataflows.",
  "folders": [
    "docs"
  ],
  "excludeFolders": [
    "src",
    "tests",
    "benchmarks",
    "site",
    "build",
    "dist",
    "scripts",
    ".git",
    ".venv",
    ".uv",
    ".mypy_cache",
    ".ruff_cache",
    ".pytest_cache",
    "notebooks",
    "notebooks/.ipynb_checkpoints"
  ],
  "excludeFiles": [
    "CHANGELOG.md",
    "LICENSE",
    "LICENSE.md",
    "pyproject.toml",
    "ruff.toml",
    "mypy.ini",
    "Makefile",
    "RELEASE_NOTES.md",
    "SUPPORT.md",
    "404.md",
    "tags.md",
    "mkdocs.yml",
    "uv.lock",
    "package.json",
    "package-lock.json",
    ".DS_Store"
  ],
  "rules": [
    "Use MessageType.DATA for normal data messages, MessageType.CONTROL for control signals, MessageType.ERROR for error reporting",
    "Always specify name parameter when creating Node and Subgraph instances",
    "Define proper input/output ports with PortSpec including type hints for validation",
    "Use _handle_tick() method for periodic work, not on_tick() - this is the override method",
    "Use _handle_message() method for message processing, not on_message() - this is the override method",
    "Implement proper backpressure handling with bounded edges and overflow policies (Block, Drop, Latest, Coalesce)",
    "Use structured logging with event keys and contextual fields via with_context()",
    "Follow the Node lifecycle: on_start, on_message, on_tick, on_stop (these are hooks, not overrides)",
    "Use uv for package management and development workflow",
    "Implement proper error handling without exposing sensitive data in logs",
    "Use PortSpec with type hints for proper validation",
    "Connect nodes using Subgraph.connect(('source', 'port'), ('target', 'port'))",
    "Use Scheduler.run() for execution, not manual step-by-step approaches",
    "Configure observability with ObservabilityConfig before using logging/metrics/tracing",
    "Use Message constructor with type parameter: Message(type=MessageType.DATA, payload=...)",
    "Always call super().__init__() in Node subclasses with name and ports parameters",
    "Use Port constructor with direction and spec: Port('name', PortDirection.INPUT, spec=PortSpec('name', type))",
    "Handle backpressure by catching RuntimeError from emit() calls when edges are full",
    "Use control-plane priorities for critical messages by setting edge priorities",
    "Implement error handling with MessageType.ERROR and structured error payloads",
    "Use contextual logging with with_context() for trace_id, node, edge_id, port enrichment",
    "Configure metrics with proper namespacing and labels for observability",
    "Use SchedulerConfig for tuning scheduler behavior (tick_interval_ms, fairness_ratio, etc.)",
    "Validate subgraphs before execution using subgraph.validate()",
    "Use proper capacity values for edges based on expected load and backpressure requirements",
    "Implement graceful shutdown by calling scheduler.shutdown()",
    "Use trace_id propagation for distributed tracing across nodes",
    "Handle message validation failures gracefully with proper error messages",
    "Use factory functions for policies: block(), drop(), latest(), coalesce(fn)",
    "Configure observability once at application startup, not per-node"
  ],
  "previousVersions": [
    { "tag": "v1.1.2", "title": "version 1.1.2" },
    { "tag": "v1.1.1", "title": "version 1.1.1" },
    { "tag": "v1.1.0", "title": "version 1.1.0" },
    { "tag": "v1.0.2", "title": "version 1.0.2" },
    { "tag": "v1.0.1", "title": "version 1.0.1" },
    { "tag": "v1.0.0", "title": "version 1.0.0" }
  ]
}
